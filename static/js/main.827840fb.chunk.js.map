{"version":3,"sources":["components/IdleInputs/index.tsx","components/RunningControls/index.tsx","components/IdleInputs/SetupFocus.tsx","components/IdleInputs/SetupBreak.tsx","components/CountdownTimer.tsx","components/RunningControls/AddDistraction.tsx","components/Status.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ScreenState","SetupFocus","props","startFocus","cancel","defaultFocusType","useState","goal","setGoal","duration","setDuration","type","setType","onSubmit","e","preventDefault","htmlFor","accessKey","autoFocus","id","onChange","target","value","parseInt","FocusType","Personal","checked","Work","onClick","SetupBreak","startBreak","breakType","suggestedDuration","description","setDescription","IdleInputs","shortBreakMinutes","longBreakMinutes","Idle","screenState","setScreenState","suggestedBreakDuration","setSuggestedBreakDuration","BreakType","Short","selectedBreakType","setSelectedBreakType","setupBreak","Fragment","Long","console","error","formatTimeRemaining","totalSecondsRemaining","pastDue","Math","abs","minutesRemaining","floor","secondsRemaining","paddedMinutesRemaining","paddedSecondsRemaining","CountdownTimer","timeRemaining","end","current","AddDistraction","addDistraction","defaultDistractionType","selectedDistrictionType","setSelectedDistractionType","distractionDescription","setDistractionDescription","DistractionType","Internal","External","RunningControls","stopActivity","Default","stopTimeString","setStopTimeString","AddingDistraction","StoppingActivity","Date","toLocaleString","distractionType","stopTime","parse","placeholder","favicon","title","Status","activity","currentTime","icon","scheduledEnd","ActivityType","Focus","status","Break","newTitle","emoji","iconLink","document","querySelector","href","updateFavicon","className","CurrentState","getUnixTime","now","minutesToSeconds","minutes","deepCopy","thing","JSON","stringify","prettifyTimes","key","intervalId","undefined","App","currentState","activities","setActivities","setCurrentTime","currentActivity","setCurrentActivity","lastUsedDistractionType","setLastUsedDistractionType","lastUsedFocusType","setLastUsedFocusType","useEffect","latestTag","tags","latestDistraction","distractions","length","activitiesJson","localStorage","getItem","parsedActivities","currentActivityJson","parsedActivity","setItem","Focusing","Relaxing","Idling","window","setInterval","newTime","clearInterval","checkedNotificationPermissions","setCheckedNotificationPermissions","Notification","permission","requestPermission","controls","timer","hasNotifiedTimout","setHasNotifiedTimout","notification","requireInteraction","tag","renotify","onclick","focus","close","start","activityCopy","push","activitiesCopy","Array","from","reverse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.827840fb.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport SetupFocus from './SetupFocus';\nimport SetupBreak from './SetupBreak';\nimport { BreakType, FocusType } from '../../App';\n\nenum ScreenState {\n  Idle,\n  SetupFocus,\n  SetupBreak,\n}\n\ntype IdleInputsProps = {\n    startFocus: (description: string, duration: number, type: string[])=>void,\n    startBreak: (description: string, duration: number, breakType: BreakType)=>void,\n    shortBreakMinutes: number,\n    longBreakMinutes: number,\n    defaultFocusType: FocusType\n}\n\nexport default function IdleInputs(props : IdleInputsProps) {\n    const {startFocus, startBreak, defaultFocusType, shortBreakMinutes, longBreakMinutes} = props;\n    const [screenState, setScreenState] = useState(ScreenState.Idle);\n    const [suggestedBreakDuration, setSuggestedBreakDuration] = useState(0);\n    const [selectedBreakType, setSelectedBreakType] = useState(BreakType.Short);\n\n    function setupBreak(suggestedDuration : number, breakType: BreakType) {\n        setSuggestedBreakDuration(suggestedDuration);\n        setSelectedBreakType(breakType);\n        setScreenState(ScreenState.SetupBreak);\n    }\n\n    switch(screenState){\n        case ScreenState.Idle:\n            return(\n                <React.Fragment>\n                    <button autoFocus accessKey=\"o\" onClick={() => setScreenState(ScreenState.SetupFocus)}>F<u>o</u>cus</button>\n                    <button accessKey=\"h\" onClick={() => setupBreak(shortBreakMinutes, BreakType.Short)}>S<u>h</u>ort Break</button>\n                    <button accessKey=\"l\" onClick={() => setupBreak(longBreakMinutes, BreakType.Long)}><u>L</u>ong Break</button>\n                </React.Fragment>\n            );\n        case ScreenState.SetupFocus:\n            return(\n                <SetupFocus startFocus={startFocus} defaultFocusType={defaultFocusType} cancel={()=>setScreenState(ScreenState.Idle)} />\n            );\n        case ScreenState.SetupBreak:\n            return(\n                <SetupBreak startBreak={startBreak} breakType={selectedBreakType} suggestedDuration={suggestedBreakDuration} cancel={()=>setScreenState(ScreenState.Idle)} />\n            );\n        default:\n            console.error(`Unknown state for idle inputs: ${screenState}`)\n            return(\n                <React.Fragment/>\n            );\n    }\n}\n","import React, { useEffect, useState } from 'react';\nimport { DistractionType } from '../../App';\nimport AddDistraction from './AddDistraction';\n\ntype RunningControlsProps = {\n    addDistraction: (description: string, type: DistractionType)=>void,\n    stopActivity: (time: number)=>void,\n    defaultDistractionType: DistractionType,\n}\n\nenum ScreenState {\n    Default,\n    AddingDistraction,\n    StoppingActivity\n}\n\nfunction getCurrentTime() {\n    return Math.floor(Date.now() / 1000 );\n}\n\nexport default function RunningControls(props : RunningControlsProps){\n    const {addDistraction, stopActivity, defaultDistractionType} = props;\n\n    const [screenState, setScreenState] = useState(ScreenState.Default);\n\n    const [stopTimeString, setStopTimeString] = useState(\"\");\n    \n    function handleStopActivity(e : React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        const stopTime = Date.parse(stopTimeString);\n        if(stopTime) {\n            stopActivity(Math.floor(stopTime / 1000));\n        } else {\n            setStopTimeString((new Date()).toLocaleString());\n        }\n    }\n\n    function handleAddDistraction(distractionDescription: string, distractionType: DistractionType) {\n        addDistraction(distractionDescription, distractionType);\n        setScreenState(ScreenState.Default);\n    }\n\n    switch(screenState) {\n        case ScreenState.Default:\n            return(\n                <React.Fragment>\n                    <button autoFocus accessKey=\"d\" onClick={()=>setScreenState(ScreenState.AddingDistraction)}>A<u>d</u>d Distraction</button>\n                    <button\n                      accessKey=\"n\"\n                      onClick={()=>{setScreenState(ScreenState.StoppingActivity); setStopTimeString((new Date()).toLocaleString())}}>\n                      E<u>n</u>d Activity\n                    </button>\n                </React.Fragment>\n            );\n        case ScreenState.AddingDistraction:\n            return(\n                <AddDistraction\n                  addDistraction={handleAddDistraction}\n                  cancel={()=>setScreenState(ScreenState.Default)}\n                  defaultDistractionType={defaultDistractionType}/>\n            );\n        case ScreenState.StoppingActivity:\n            return(\n                <form onSubmit={handleStopActivity}>\n                    <label htmlFor=\"stopTime\" accessKey=\"t\">S<u>t</u>op time:</label>\n                    <input autoFocus id=\"stopTime\" type=\"text\" placeholder=\"Stop time...\" value={stopTimeString} onChange={e=>setStopTimeString(e.target.value)}/>\n                    <button accessKey=\"c\" type=\"submit\"><u>C</u>onfirm</button>\n                    <button accessKey=\"b\" onClick={()=>setScreenState(ScreenState.Default)}><u>B</u>ack</button>\n                </form>\n            )\n    }\n}\n","import React, { useState } from 'react';\nimport { FocusType } from '../../App';\n\ntype SetupFocusProps = {\n    startFocus: (description: string, duraction: number, type: string[])=>void,\n    cancel: ()=>void,\n    defaultFocusType: FocusType\n}\n\nexport default function SetupFocus(props : SetupFocusProps) {\n    const {startFocus, cancel, defaultFocusType} = props;\n\n    const [goal, setGoal] = useState(\"\");\n    const [duration, setDuration] = useState(25);\n    const [type, setType] = useState(defaultFocusType);\n\n    function handleSubmit(e : React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        startFocus(goal, duration, [type])\n    }\n\n    return(\n        <form onSubmit={handleSubmit}>\n            <label htmlFor=\"pomGoal\" accessKey=\"g\"><u>G</u>oal:</label>\n            <input autoFocus id=\"pomGoal\" type=\"text\" onChange={(e)=>setGoal(e.target.value)} value={goal}/>\n            <label htmlFor=\"pomDuration\" accessKey=\"d\"><u>D</u>uration:</label>\n            <input id=\"pomDuration\" type=\"text\" onChange={(e)=>setDuration(parseInt(e.target.value) || 0)} value={duration}/>\n            <label accessKey=\"p\"><input type=\"Radio\" value={FocusType.Personal} checked={type === FocusType.Personal} onChange={()=>{setType(FocusType.Personal)}}/><u>P</u>ersonal</label>\n            <label accessKey=\"o\"><input type=\"Radio\" value={FocusType.Work} checked={type === FocusType.Work} onChange={()=>{setType(FocusType.Work)}}/>W<u>o</u>rk</label>\n            <button accessKey=\"s\" type=\"submit\"><u>S</u>tart</button>\n            <button accessKey=\"b\" onClick={cancel}><u>B</u>ack</button>\n        </form>\n    )\n}","import React, { useState } from 'react';\nimport { BreakType } from '../../App';\n\ntype SetupBreakProps = {\n    startBreak: (description: string, minutes: number, breakType: BreakType)=>void,\n    breakType: BreakType,\n    suggestedDuration: number,\n    cancel: ()=>void,\n}\n\nexport default function SetupBreak(props : SetupBreakProps) {\n    const {startBreak, breakType, suggestedDuration, cancel} = props;\n\n    const [description, setDescription] = useState(\"\");\n    const [duration, setDuration] = useState(suggestedDuration);\n\n    return(\n        <form onSubmit={e => {e.preventDefault(); startBreak(description, duration, breakType)}}>\n            <label htmlFor=\"break-description\" accessKey=\"c\">Des<u>c</u>ription:</label>\n            <input autoFocus id=\"break-description\" type=\"text\" onChange={(e)=>setDescription(e.target.value)} value={description}/>\n            <label htmlFor=\"pom-duration\" accessKey=\"d\"><u>D</u>uration:</label>\n            <input id=\"pom-duration\" type=\"text\" onChange={(e)=>setDuration(parseInt(e.target.value) || 0)} value={duration}/>\n            <button accessKey=\"s\" type=\"submit\"><u>S</u>tart</button>\n            <button accessKey=\"b\" onClick={cancel}><u>B</u>ack</button>\n        </form>\n    )\n}","import React, { useEffect, useState } from 'react';\n\ntype CountdownTimerProps = {\n    end : number,\n    current : number\n}\n\nexport function formatTimeRemaining(totalSecondsRemaining : number) {\n    const pastDue = totalSecondsRemaining < 0;\n    totalSecondsRemaining = Math.abs(totalSecondsRemaining);\n    const minutesRemaining = Math.floor(totalSecondsRemaining / 60);\n    const secondsRemaining = totalSecondsRemaining % 60;\n    const paddedMinutesRemaining = minutesRemaining < 10 ? (\"0\" + minutesRemaining) : (\"\" + minutesRemaining);\n    const paddedSecondsRemaining = secondsRemaining < 10 ? (\"0\" + secondsRemaining) : (\"\" + secondsRemaining);\n    return `${pastDue ? \"-\" : \"\"}${paddedMinutesRemaining}:${paddedSecondsRemaining}`;\n}\n\nexport default function CountdownTimer(props : CountdownTimerProps) {\n    const {end, current} = props;\n    const timeRemaining = formatTimeRemaining(end - current);\n    return (\n        <pre>\n            {timeRemaining}\n        </pre>\n    )\n}","import React, { useState } from 'react';\nimport { DistractionType } from '../../App';\n\ntype AddDistractionProps = {\n    addDistraction: (distractionDescription: string, distractionType: DistractionType)=>void,\n    cancel: ()=>void,\n    defaultDistractionType: DistractionType\n}\n\nexport default function AddDistraction(props : AddDistractionProps) {\n    const {addDistraction, defaultDistractionType, cancel} = props;\n    const [selectedDistrictionType, setSelectedDistractionType] = useState(defaultDistractionType);\n    const [distractionDescription, setDistractionDescription] = useState(\"\");\n    return (\n        <form onSubmit={e => {e.preventDefault(); addDistraction(distractionDescription, selectedDistrictionType)}}>\n            <label accessKey=\"d\" htmlFor=\"distraction-description\"><u>D</u>istraction description:</label>\n            <input autoFocus id=\"distraction-description\" type=\"text\" onChange={e => setDistractionDescription(e.target.value)}/>\n            <label accessKey=\"i\">\n                <input type=\"radio\" checked={selectedDistrictionType === DistractionType.Internal} onClick={()=>setSelectedDistractionType(DistractionType.Internal)}></input>\n                <u>I</u>nternal\n            </label>\n            <label accessKey=\"x\">\n                <input type=\"radio\" checked={selectedDistrictionType === DistractionType.External} onClick={()=>setSelectedDistractionType(DistractionType.External)}></input>\n                E<u>x</u>ternal\n            </label>\n            <button type=\"submit\"><u>A</u>dd</button>\n            <button onClick={cancel}><u>B</u>ack</button>\n        </form>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { Activity, ActivityType } from '../App';\nimport { formatTimeRemaining } from './CountdownTimer';\nimport './Status.css';\n\ntype StatusProps = {\n    activity: Activity | null\n    currentTime: number\n}\n\nlet favicon = \"\";\nfunction updateFavicon(emoji : string) {\n    if (favicon !== emoji) {\n        favicon = emoji;\n        const iconLink = document.querySelector<HTMLLinkElement>(\"link[rel=icon]\");\n        if (iconLink) {\n            iconLink.href = `data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>${favicon}</text></svg>`\n        } else {\n            console.error(\"Could not find favicon link tag\");\n        }\n    }\n}\n\nlet title = \"\";\nfunction updateTitle(newTitle : string) {\n    if (newTitle !== title) {\n        title = newTitle;\n        document.title = newTitle;\n    }\n}\n\nexport default function Status(props : StatusProps) {\n    const {activity, currentTime} = props;\n\n    let icon = \"\";\n    if(activity === null) {\n        icon = \"💤\";\n    } else if(activity.scheduledEnd > currentTime) {\n        icon = activity.type === ActivityType.Focus ? \"🤔\" : \"😎\";\n    } else {\n        icon = \"⌛\";\n    }\n\n    let status = \"\";\n    if(activity === null) {\n        status = \"Idling...\"\n    } else if(activity.type === ActivityType.Break) {\n        status = \"Relaxing...\"\n    } else if(activity.type === ActivityType.Focus) {\n        status = `Focusing on ${activity.goal}...`\n    }\n\n    let timeRemaining = \"\";\n    if(activity !== null) {\n        timeRemaining = `${formatTimeRemaining(activity.scheduledEnd - currentTime)} `\n    }\n\n    updateFavicon(icon);\n    updateTitle(`${timeRemaining}${status}`);\n    return(\n        <h1 className=\"Status\">{`${icon} ${status}`}</h1>\n    );\n}","import React, { ReactElement, useEffect, useState } from 'react';\nimport './App.css';\nimport IdleInputs from './components/IdleInputs/index';\nimport CountdownTimer from './components/CountdownTimer';\nimport RunningControls from './components/RunningControls';\nimport Status from './components/Status';\n\nconst POM_MINUTES = 25;\nconst SHORT_BREAK_MINUTES = 5;\nconst LONG_BREAK_MINUTES = 15;\n\n\nexport enum ActivityType {\n  Focus = \"focus\",\n  Break = \"break\" \n};\nexport enum DistractionType { \n  Internal = 'internal',\n  External = 'external'\n};\nexport enum BreakType {\n  Short = 'short break',\n  Long = 'long break'\n};\nexport enum FocusType{\n    Personal = \"personal\",\n    Work = \"work\"\n}\n\ntype Distraction = {\n  description: string,\n  type: DistractionType\n}\n\nexport type Activity = {\n  start: number,\n  scheduledEnd: number;\n  end: number | null,\n  type: ActivityType,\n  goal: string,\n  distractions: Distraction[],\n  tags: string[]\n}\n\nenum CurrentState {\n  Idling = 'idling',\n  Focusing = 'focusing',\n  Relaxing = 'relaxing',\n};\n\nfunction getUnixTime() : number {\n  return Math.floor(Date.now() / 1000);\n}\n\nfunction minutesToSeconds(minutes : number) {\n  return minutes * 60;\n}\n\nfunction deepCopy<T>(thing: T): T {\n  return JSON.parse(JSON.stringify(thing));\n}\n\nfunction prettifyTimes(key : string, value : any) {\n  if((key === 'start' || key === 'scheduledEnd' || key === 'end') && value) {\n    return (new Date(value * 1000)).toLocaleString();\n  }\n  return value;\n}\n\nlet intervalId : undefined | number = undefined;\n\nfunction App() {\n\n  const [activities, setActivities] = useState<Activity[]>([]);\n  const [currentTime, setCurrentTime] = useState(getUnixTime());\n  const [currentActivity, setCurrentActivity] = useState<Activity | null>(null);\n  const [lastUsedDistractionType, setLastUsedDistractionType] = useState(DistractionType.Internal);\n  const [lastUsedFocusType, setLastUsedFocusType] = useState(FocusType.Work);\n\n  //update the last used distraction and activity type\n  useEffect(()=>{\n    if(!currentActivity)\n      return;\n\n    const latestTag = currentActivity.tags[0];\n    const latestDistraction = currentActivity.distractions[currentActivity.distractions.length - 1];\n\n    if(currentActivity.type === ActivityType.Focus && latestTag && latestTag !== lastUsedFocusType)\n      setLastUsedFocusType(latestTag as FocusType);\n    if(latestDistraction && latestDistraction.type != lastUsedDistractionType) {\n      setLastUsedDistractionType(latestDistraction.type);\n    }\n  }, [currentActivity]);\n\n  //load from local storage on page load\n  useEffect(()=>{\n    const activitiesJson = localStorage.getItem('activities');\n    if(activitiesJson) {\n      const parsedActivities = JSON.parse(activitiesJson) as Activity[];\n      setActivities(parsedActivities);\n    }\n\n    const currentActivityJson = localStorage.getItem('currentActivity');\n    if(currentActivityJson) {\n      const parsedActivity = JSON.parse(currentActivityJson) as Activity;\n      setCurrentActivity(parsedActivity);\n    }\n  }, []);\n\n  //save activities when updated\n  useEffect(()=>{\n    localStorage.setItem(\"activities\", JSON.stringify(activities));\n  }, [activities]);\n\n  //save currentActivity when updated\n  useEffect(()=>{\n    localStorage.setItem(\"currentActivity\", JSON.stringify(currentActivity));\n  }, [currentActivity]);\n\n  let currentState : CurrentState;\n  if(currentActivity && currentActivity.end === null){\n    switch(currentActivity.type){\n      case ActivityType.Focus:\n        currentState = CurrentState.Focusing;\n        break;\n      case ActivityType.Break:\n        currentState = CurrentState.Relaxing;\n        break;\n      default:\n        console.error(`Unknown activity type: ${currentActivity.type}`);\n        currentState = CurrentState.Idling;\n    }\n  } else {\n    currentState = CurrentState.Idling;\n  }\n\n  // set the internal timer\n  useEffect(() => {\n    if(intervalId === undefined) {\n      intervalId = window.setInterval(()=>{\n        const newTime = getUnixTime();\n        if(newTime > currentTime){\n          setCurrentTime(newTime);\n        }\n      }, 500);\n    }\n    return () => {\n      window.clearInterval(intervalId);\n      intervalId = undefined;\n    };\n  });\n\n  // check that notifications are setup\n  const [checkedNotificationPermissions, setCheckedNotificationPermissions] = useState(false);\n  useEffect(() => {\n    if(!checkedNotificationPermissions) {\n      if(Notification.permission !== \"granted\"){\n        Notification.requestPermission();\n      }\n      setCheckedNotificationPermissions(true);\n    }\n  });\n\n  //send notification if time has expired\n  const [hasNotifiedTimout, setHasNotifiedTimout] = useState(false);\n  useEffect(() => {\n    if(currentState !== CurrentState.Idling && currentActivity && currentTime > currentActivity.scheduledEnd && !hasNotifiedTimout) {\n      const notification = new Notification(`${currentActivity.type} time complete`, {requireInteraction: true, tag: 'renotify', renotify: true});\n      notification.onclick = () => {window.focus(); notification.close();}\n      setHasNotifiedTimout(true);\n    }\n  });\n\n  //set current activity to focus\n  function startFocus(goal: string, duration: number, tags: string[]){\n    const start = getUnixTime();\n    const scheduledEnd = start + minutesToSeconds(duration);\n    const activity : Activity = {\n      start,\n      end: null,\n      scheduledEnd,\n      goal,\n      tags,\n      type: ActivityType.Focus,\n      distractions: []\n    }\n    setCurrentActivity(activity);\n    setHasNotifiedTimout(false);\n  }\n\n  //set current activity to a break\n  function startBreak(description: string, minutes: number, breakType: BreakType){\n    const start = getUnixTime();\n    const scheduledEnd = start + minutesToSeconds(minutes);\n    const activity : Activity = {\n      start,\n      end: null,\n      scheduledEnd,\n      type: ActivityType.Break,\n      goal: description,\n      tags: [breakType],\n      distractions: [],\n    }\n    setCurrentActivity(activity);\n    setHasNotifiedTimout(false);\n  }\n\n  function addDistraction(description: string, type: DistractionType) {\n    if(!currentActivity) {\n      console.error(\"trying to add a distraction when no activity is in progress\");\n      return;\n    }\n    const activityCopy = deepCopy(currentActivity);\n    if(!activityCopy.distractions) {\n      activityCopy.distractions = [];\n    }\n    activityCopy.distractions.push({\n      description,\n      type\n    });\n    setCurrentActivity(activityCopy);\n  }\n\n  function stopActivity(stopTime: number) {\n    if(!currentActivity) {\n      console.error(\"trying to stop an activity when no activity is in progress\");\n      return;\n    }\n    const activityCopy = deepCopy(currentActivity);\n    const activitiesCopy = Array.from(activities);\n    activityCopy.end = stopTime;\n    activitiesCopy.push(activityCopy);\n    setActivities(activitiesCopy);\n    setCurrentActivity(null);\n  }\n\n  let controls : JSX.Element;\n  switch(currentState) {\n    case CurrentState.Idling:\n      controls = (\n        <IdleInputs\n          startFocus={startFocus}\n          startBreak={startBreak}\n          shortBreakMinutes={SHORT_BREAK_MINUTES}\n          longBreakMinutes={LONG_BREAK_MINUTES} \n          defaultFocusType={lastUsedFocusType}\n        />\n      )\n      break;\n    case CurrentState.Focusing:\n    case CurrentState.Relaxing:\n      controls = <RunningControls addDistraction={addDistraction} stopActivity={stopActivity} defaultDistractionType={lastUsedDistractionType} />\n      break;\n    default:\n      console.error(`Unsupported currentState: ${currentState}`)\n      controls = <React.Fragment/>\n  }\n\n  let timer : JSX.Element;\n  if(currentActivity && currentState != CurrentState.Idling) {\n      timer = (<CountdownTimer end={currentActivity.scheduledEnd} current={currentTime}/>);\n  } else {\n      timer = ( <CountdownTimer end={0} current={0}/> );\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          yapt: yet another pomodoro timer\n        </p>\n      </header>\n      <div className=\"App-body\">\n        <Status activity={currentActivity} currentTime={currentTime}/>\n        <div className=\"Timer-controls\">\n          {timer}\n          {controls}\n        </div>\n        <hr/>\n        <h2>Current Activity</h2>\n        <pre>\n          {JSON.stringify(currentActivity, prettifyTimes, 2)}\n        </pre>\n        <hr/>\n        <h2>Previous Activities</h2>\n        <pre>\n          {JSON.stringify(Array.from(activities).reverse(), prettifyTimes, 2)}\n        </pre>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}